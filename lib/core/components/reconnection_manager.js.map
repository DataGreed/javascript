{"version":3,"sources":["core/components/reconnection_manager.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AAOA,IAAM,sBAAsB,IAA5B;AACA,IAAM,aAAa,CAAnB;;;AAUE,wBAAgF;AAAA,QAAlE,YAAkE,QAAlE,YAAkE;AAAA,QAApD,uBAAoD,QAApD,uBAAoD;;AAAA;;AAC9E,SAAK,aAAL,GAAqB,YAArB;AACA,SAAK,wBAAL,GAAgC,uBAAhC;AACA,SAAK,UAAL,GAAkB,IAAlB;AACA,SAAK,YAAL,GAAoB,CAApB;AACD;;;;mCAEc;AACb,WAAK,WAAL;AACA,WAAK,UAAL,GAAkB,WAAW,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAAX,EAA6C,KAAK,cAAL,EAA7C,CAAlB;AACD;;;qCAEgB;AACf,UAAI,KAAK,UAAT,EAAqB;AACnB,eAAO,mBAAP;AACD,OAFD,MAEO;AACL,eAAO,OAAO,KAAK,YAAnB;AACD;AACF;;;kCAEa;AACZ,oBAAc,KAAK,UAAnB;AACD;;;uCAEkB;AAAA;;AACjB,WAAK,aAAL,CAAmB,UAAC,MAAD,EAAgC;AACjD,YAAI,OAAO,KAAP,IAAgB,MAAK,UAAzB,EAAqC;AACnC,gBAAK,UAAL,GAAkB,KAAlB;AACA,gBAAK,wBAAL,CAA8B,MAAK,UAAnC;AACD,SAHD,MAGO,IAAI,CAAC,OAAO,KAAR,IAAiB,CAAC,MAAK,UAA3B,EAAuC;AAC5C,gBAAK,UAAL,GAAkB,IAAlB;AACA,gBAAK,YAAL,GAAoB,CAApB;AACA,gBAAK,wBAAL,CAA8B,MAAK,UAAnC;AACD;;AAGD,YAAI,CAAC,MAAK,UAAV,EAAsB;AACpB,gBAAK,YAAL,GAAqB,MAAK,YAAL,KAAsB,UAAtB,GAAmC,CAAnC,GAAuC,MAAK,YAAL,IAAqB,CAAjF;AACD;;AAED,cAAK,YAAL;AAED,OAjBD;AAkBD","file":"core/components/reconnection_manager.js","sourcesContent":["import TimeEndpoint from '../endpoints/time';\nimport { StatusAnnouncement } from '../flow_interfaces';\n\ntype ReconnectionManagerArgs = {\n  timeEndpoint: TimeEndpoint,\n  onConnectionStateChange: Function\n}\n\nconst SUCCESSFUL_INTERVAL = 6000;\nconst MAX_FAILED = 5;\n\nexport default class {\n\n  _onConnectionStateChange: Function;\n  _timeEndpoint: TimeEndpoint;\n  _timeTimer: number;\n  _connected: boolean;\n  _failedTries: number;\n\n  constructor({ timeEndpoint, onConnectionStateChange }: ReconnectionManagerArgs) {\n    this._timeEndpoint = timeEndpoint;\n    this._onConnectionStateChange = onConnectionStateChange;\n    this._connected = true;\n    this._failedTries = 0;\n  }\n\n  startPolling() {\n    this.stopPolling();\n    this._timeTimer = setTimeout(this._performTimeLoop.bind(this), this.decideInterval());\n  }\n\n  decideInterval() {\n    if (this._connected) {\n      return SUCCESSFUL_INTERVAL;\n    } else {\n      return 1000 * this._failedTries;\n    }\n  }\n\n  stopPolling() {\n    clearInterval(this._timeTimer);\n  }\n\n  _performTimeLoop() {\n    this._timeEndpoint((status: StatusAnnouncement) => {\n      if (status.error && this._connected) {\n        this._connected = false;\n        this._onConnectionStateChange(this._connected);\n      } else if (!status.error && !this._connected) {\n        this._connected = true;\n        this._failedTries = 0;\n        this._onConnectionStateChange(this._connected);\n      }\n\n      // if we are still not connected, bump up the unsuccessful count for exponential back-off.\n      if (!this._connected) {\n        this._failedTries =  this._failedTries === MAX_FAILED ? 1 : this._failedTries += 1;\n      }\n\n      this.startPolling();\n\n    });\n  }\n\n}\n"],"sourceRoot":"/source/"}